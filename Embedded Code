#include "C:/Keil/Labware/tm4c123gh6pm.h"
#include "stdint.h"
#include "math.h"
#include "stdlib.h"
#include "stdbool.h"
#include "stdio.h"
#include "string.h"
void SystemInit() {};
/**********************prototypes************************************/
void RGBLED_Init (void);
void lcd_init(void);
void delay_ms(int n);
void delay_us(int n);
void LCD_command(char command);
void LCD_data(char DATA);
void switch_init(void);
void DistToChar(int dist);

	/**********************************************************/

void RGBLED_Init (void)
{
SYSCTL_RCGCGPIO_R |= 0x20;
while((SYSCTL_PRGPIO_R&0x20)==0){};
GPIO_PORTF_LOCK_R=0x4C4F434B;
GPIO_PORTF_CR_R|=0x0E;
GPIO_PORTF_DIR_R |=0x0E;
GPIO_PORTF_DEN_R |= 0x0E;
GPIO_PORTF_AMSEL_R &=~0x0E;
GPIO_PORTF_PCTL_R &= ~0x0000FFF0;

}

/*******************************************************/
void lcd_init(void)
{
SYSCTL_RCGCGPIO_R |= 0x03; //activate port B and A   00000011
while((SYSCTL_PRGPIO_R&0x03)==0){};
GPIO_PORTB_CR_R=0xFF;
GPIO_PORTB_DIR_R=0xFF;
GPIO_PORTB_AFSEL_R=0x00;
GPIO_PORTB_PCTL_R=0x00000000;
GPIO_PORTB_DEN_R=0xFF;
GPIO_PORTB_AMSEL_R=0x00;
GPIO_PORTB_DATA_R=0x00;
//PORD A initialize FOR EN & RS ---> RW is connected to ground to be always = 0
GPIO_PORTA_CR_R|=0xC0;
GPIO_PORTA_DIR_R|=0xC0;
GPIO_PORTA_AFSEL_R &=~0xC0;
GPIO_PORTA_PCTL_R &=~0xFF00000;
GPIO_PORTA_DEN_R|=0xC0;
GPIO_PORTA_AMSEL_R &=~0xC0;
GPIO_PORTA_DATA_R &=~0xC0;
delay_ms(20);

 //initialization sequence

LCD_command(0x30);
delay_ms(5);
LCD_command(0x30);
delay_us(100);
LCD_command(0x30);
LCD_command(0x38); // set 8-bit data, 2-line, 5x7 font
LCD_command(0x06); // move cursor right
LCD_command(0x01); // clear screen, move cursor to home

}

/********************************************/

void delay_ms(int n){
int i,j;
for(i=0;i<n;i++)
for(j=0;j<3180;j++)
{}
}
 void delay_us(int n){
int i,j;
for(i=0;i<n;i++)
for(j=0;j<3;j++)
{}
}


/****************************************************/
  void LCD_command(char command){

  GPIO_PORTA_DATA_R =0x00 ; // CLEAR RS
  GPIO_PORTB_DATA_R =command ; //SEND DATA
  GPIO_PORTA_DATA_R =0x40 ; // SET EN
  delay_us(0);
   GPIO_PORTA_DATA_R =0x00 ; //CLEAR EN
  	if (command < 4)
  delay_ms(2); // command 1 and 2 needs up to 1.64ms */
  else
  delay_us(40); // all others 40 us */

  }

/**************************************/
void LCD_data(char DATA){
GPIO_PORTA_DATA_R =0x80 ; // RS = 1 FOR DATA
GPIO_PORTB_DATA_R =DATA ;
GPIO_PORTA_DATA_R |=0x40 ; // SET EN
delay_us(0);
GPIO_PORTA_DATA_R =0x00 ; //CLEAR EN to change latch (covert enable from 1 to 0 vice versa)
delay_us(40);

}

/************************************************/

void switch_init(void){
SYSCTL_RCGCGPIO_R |= 0x20;
while((SYSCTL_PRGPIO_R&0x20)==0){};
GPIO_PORTF_LOCK_R=0x4C4F434B;
GPIO_PORTF_CR_R|=0x01;
GPIO_PORTF_DIR_R &=~ 0x01;
GPIO_PORTF_DEN_R |= 0x01;
GPIO_PORTF_AMSEL_R &=~0x01;
GPIO_PORTF_PCTL_R &=~0x0000000F;
GPIO_PORTF_PUR_R |= 0x01;
}

/**************************************/

void DistToChar(int dist) // to convert numbers to characters to print on LCD
{
        int k;
	int l;
	int j=0;
	int arr[4];
	while(dist>0)
	{

	arr[j] = dist%10 ;
		dist=dist/10;
		j++;
	}

	for (k=j-1 ; k>=0 ; k--)
	{
	 l=arr[k]+48;
		LCD_data(l);
		delay_ms(10);
	}

}

/*********************************************************************/

int main()
{

RGBLED_Init();
switch_init();
lcd_init();
LCD_command(0X01);	// clear display
delay_ms(10);
LCD_command(0x80);  // LCD cursor location
delay_ms(500);
LCD_data('D');
LCD_data('I');
LCD_data('S');
LCD_data('T');
LCD_data('=');


	/******loop to keep the distance up to date**********/
	while(1)
	{
	int distance =350; //initialize random distance
	LCD_command(0x85); // set the location
	DistToChar(distance);
		delay_ms(500);


        if ( distance > 100 )
       {GPIO_PORTF_DATA_R =0x08; }  // green led on

       else GPIO_PORTF_DATA_R &=~0x08;
	 }

}
void gps_init(void)
{
SYSCTL_RCGCGPIO_R |= 0x08;
SYSCTL_RCGCUART_R |= 0x04;  /* enable clock to UART2 */
 /* enable clock to PORTD  */  //FEDCBA
 delay_us(1);
  /* UART0 initialization */
  UART2_CTL_R = 0;         /* UART5 module disbable */
  UART2_IBRD_R = 104;     /* 16MHz/16=1MHz, 1MHz/104=9600 baud rate */
  UART2_FBRD_R = 11;      /* fraction part of baud generator register*/
	UART2_CC_R = 0;          /*select system clock*/
  UART2_LCRH_R = 0x0070;     /* data lenght 8-bit, not parity bit, no FIFO */
  UART2_CTL_R = 0x201;      /* enable UART2, TXE, RXE */
